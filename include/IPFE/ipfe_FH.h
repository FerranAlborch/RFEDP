/*
* Software Name : RIPFEDP
* Version: 1.1
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at 
*     http://www.apache.org/licenses/LICENSE-2.0 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Author: Ferran Alborch Escobar <ferran.alborch@gmail.com>
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <gmp.h>
#include <time.h>
#include <mcl/bn_c384_256.h>
#include "utils/mpz_to_mcl.h"
#include "utils/PG.h"
#include "utils/dlog.h"

/**
* \file
* \ingroup IPFE
* \brief This is an implementation of the function-hiding inner-product encryption scheme in
* Section 4 from the paper "Simulation Secure Multi-Input Quadratic Functional Encryption" 
* by Alborch Escobar, Canard and Laguillaumiebased on the pairing groups generated by the 
* elliptic curve BLS12-381.
*/


/**
* \struct ipfe_FH ipfe_FH.h "IPFE/ipfe_FH.h"
* \brief It represents the public parameters of the function-hiding inner-product scheme. 
*/
typedef struct ipfe_FH {
    size_t l; /**< Dimension of the input vector and function. */
    mpz_t bound_X; /**< Bound for the input plaintexts. */
    mpz_t bound_Y; /**< Bound for the functions. */
	PG pg;
} ipfe_FH;

/**
* \struct ipfe_FH_sec_key ipfe_FH.h "IPFE/ipfe_FH.h"
* \brief It represents a master secret key of the function-hiding inner-product scheme.
*/
typedef struct ipfe_FH_sec_key {
	// TODO: Change to seed
    mclBnFr *u; /**< Vector u of size l+1 in the master secret key. */
    mclBnFr *v; /**< Vector v of size l in the master secret key. */
	size_t l;
} ipfe_FH_sec_key;

/**
* \struct ipfe_FH_fe_key ipfe_FH.h "IPFE/ipfe_FH.h"
* \brief It represents a functional decryption key of the function-hiding inner-product scheme.
*/
typedef struct ipfe_FH_fe_key {
    mclBnG2 *sk; /**< An array of l+2 elements in G2 containing sk1 and sk2. */
	size_t l; /**< The dimension for the scheme.*/
} ipfe_FH_fe_key;

/**
* \struct ipfe_FH_ciphertext ipfe_FH.h "IPFE/ipfe_FH.h"
* \brief It represents a ciphertext of the function-hiding inner-product scheme.
*/
typedef struct ipfe_FH_ciphertext {
    mclBnG1 *ct; /**< An array of l+2 elements in G1 containing ct1 and ct2. */
	size_t l; /**< The dimension for the scheme. */
} ipfe_FH_ciphertext;

/**
* \fn bool ipfe_FH_precomp_init(ipfe_FH *s, size_t l, mpz_t bound_X, mpz_t bound_Y)
* \brief It initializes public parameters of the function-hiding inner-product scheme for some
* pairing groups PG from a precomputed elliptic curve. 
*
* \param s A pointer to a ipfe_FH structure.
* \param l The dimension of the vectors for the function-hiding inner-product scheme.
* \param bound_X The bound on the plaintext inputs.
* \param bound_Y the bound on the function.
*/
int ipfe_FH_precomp_init(ipfe_FH *s, size_t l, mpz_t bound_X, mpz_t bound_Y);

/**
* \fn void ipfe_FH_free(ipfe_FH *s)
* \brief It clears public parameters of the funciton-hiding inner-product scheme and frees allocated memory.
*
* \param s A pointer to a ipfe_FH structure.
*/
void ipfe_FH_free(ipfe_FH *s);

/**
* \fn void ipfe_FH_sec_key_init(ipfe_FH_sec_key *msk)
* \brief It initializes a master secret key of the function-hiding inner-product scheme.
*
* \param msk A pointer to a ipfe_FH_sec_key structure.
* \param s A pointer to a ipfe_FH structure.
*/
void ipfe_FH_sec_key_init(ipfe_FH_sec_key *msk, ipfe_FH *s);

/**
* \fn void ipfe_FH_sec_key_free(ipfe_FH_sec_key *msk)
* \brief It clears a master secret key of the function-hiding inner-product scheme and frees allocated memory.
*
* \param msk A pointer to a ipfe_FH_sec_key structure.
*/
void ipfe_FH_sec_key_free(ipfe_FH_sec_key *msk);

/**
* \fn void ipfe_FH_fe_key_init(ipfe_FH_fe_key *fe_key)
* \brief It initializes a functional decryption key of the function-hiding inner-product scheme.
*
* \param fe_key A pointer to a ipfe_FH_fe_key structure.
* \param s A pointer to a ipfe_FH structure.
*/
void ipfe_FH_fe_key_init(ipfe_FH_fe_key *fe_key, ipfe_FH *s);

/**
* \fn void ipfe_FH_fe_key_free(ipfe_FH_fe_key *fe_key)
* \brief It clears a functional decryption key of the function-hiding inner-product scheme and frees 
* allocated memory.
*
* \param fe_key A pointer to a ipfe_FH_fe_key structure.
*/
void ipfe_FH_fe_key_free(ipfe_FH_fe_key *fe_key);

/**
* \fn void ipfe_FH_ciphertext_init(ipfe_FH_ciphertext *c, ipfe_FH *s)
* \brief It initializes a ciphertext of the function-hiding inner-product scheme.
*
* \param c A pointer to a ipfe_FH_ciphertext structure.
* \param s A pointer to a ipfe_FH structure.
*/
void ipfe_FH_ciphertext_init(ipfe_FH_ciphertext *c, ipfe_FH *s);

/**
* \fn void ipfe_FH_ciphertext_free(ipfe_FH_ciphertext *c)
* \brief It clears a ciphertext of the function-hiding inner-product scheme and frees allocated memory.
*
* \param c A pointer to a ipfe_FH_ciphertext structure.
*/
void ipfe_FH_ciphertext_free(ipfe_FH_ciphertext *c);

/**
* \fn void ipfe_FH_generate_master_keys(ipfe_FH_sec_key *msk, ipfe_FH *s, double timesSetUp[])
* \brief It generates a master secret key for the function-hiding inner-product scheme.
*
* \param msk A pointer to a ipfe_FH_sec_key structure.
* \param timesSetUp An array to store the timings of this protocol.
*/
int ipfe_FH_generate_master_keys(ipfe_FH_sec_key *msk, double timesSetUp[]);

/**
* bool ipfe_FH_encrypt_unbounded(ipfe_FH_ciphertext *c, ipfe_FH *s, mpz_t *x, ipfe_FH_sec_key *msk, double timesEnc[])
* \brief It encrypts a message following the function-hiding inner-product scheme with unbounded input.
*
* \param c A pointer to a ipfe_FH_ciphertext structure.
* \param s A pointer to a ipfe_FH structure.
* \param x An array of multiple precision integers as plaintext message.
* \param msk A pointer to a ipfe_FH_sec_key structure.
* \param timesEnc An array to store the timings of this protocol.
*/
int ipfe_FH_encrypt_unbounded(ipfe_FH_ciphertext *ct, ipfe_FH *s, mclBnFr *x, ipfe_FH_sec_key *msk, double timesEnc[]);

/** 
* bool ipfe_FH_encrypt_bounded(ipfe_FH_ciphertext *c, ipfe_FH *s, mpz_t *x, ipfe_FH_sec_key *msk, double timesEnc[])
* \brief It encrypts a message following the function-hiding inner-product scheme with bounded input.
*
* \param c A pointer to a ipfe_FH_ciphertext structure.
* \param s A pointer to a ipfe_FH structure.
* \param x An array of mclBnFr as plaintext message.
* \param msk A pointer to a ipfe_FH_sec_key structure.
* \param timesEnc An array to store the timings of this protocol.
*/
int ipfe_FH_encrypt_bounded(ipfe_FH_ciphertext *ct, ipfe_FH *s, mpz_t *x, ipfe_FH_sec_key *msk, double timesEnc[]);

/**
* \fn int ipfe_FH_derive_fe_key_unbounded(ipfe_FH_fe_key *fe_key, ipfe_FH *s, ipfe_FH_sec_key *msk, mpz_t *y, double timesKeyGen[])
* \brief It derives functional decryption keys following the function-hiding inner-product scheme with unbounded input.
*
* \param fe_key A pointer to a ipfe_FH_fe_key structure.
* \param s A pointer to a ipfe_FH structure.
* \param msk A pointer to a ipfe_FH_sec_key structure.
* \param y An array of multiple precision integers as a function.
* \param timesKeyGen An array to store the timings of this protocol.
*/
int ipfe_FH_derive_fe_key_unbounded(ipfe_FH_fe_key *fe_key, ipfe_FH *s, ipfe_FH_sec_key *msk, mclBnFr *y, double timesKeyGen[]);

/**
* \fn int ipfe_FH_derive_fe_key_bounded(ipfe_FH_fe_key *fe_key, ipfe_FH *s, ipfe_FH_sec_key *msk, mpz_t *y, double timesKeyGen[])
* \brief It derives functional decryption keys following the function-hiding inner-product scheme with bounded input.
*
* \param fe_key A pointer to a ipfe_FH_fe_key structure.
* \param s A pointer to a ipfe_FH structure.
* \param msk A pointer to a ipfe_FH_sec_key structure.
* \param y An array of multiple precision integers as a function.
* \param timesKeyGen An array to store the timings of this protocol.
*/
int ipfe_FH_derive_fe_key_bounded(ipfe_FH_fe_key *fe_key, ipfe_FH *s, ipfe_FH_sec_key *msk, mpz_t *y, double timesKeyGen[]);

/**
* \fn int ipfe_FH_decrypt_exp(mclBnGT *r, ipfe_FH *s, ipfe_FH_ciphertext *c, ipfe_FH_fe_key *fe_key, double timesDec[])
* \brief It decrypts a ciphertext with a functional decryption key following the function-hiding inner-product 
* scheme returning the value in the group GT.
*
* \param r A pointer to an element in GT to store the result.
* \param s A pointer to a ipfe_FH structure.
* \param ciphertext A pointer to a ipfe_FH_ciphertext structure.
* \param fe_key A pointer to a ipfe_FH_key structure.
* \param timesDec An array to store the timings of this protocol.
*/
void ipfe_FH_decrypt_exp(mclBnGT *r, ipfe_FH *s, ipfe_FH_ciphertext *c, ipfe_FH_fe_key *fe_key, double timesDec[]);

/**
* \fn int ipfe_FH_decrypt(mpz_t *r, ipfe_FH *s, ipfe_FH_ciphertext *c, ipfe_FH_fe_key *fe_key, mpz_t bound, double timesDec[]);
* \brief It decrypts a ciphertext with a functional decryption key following the function-hiding inner-product 
* scheme returning the value in the group GT.
*
* \param r A pointer to a multiple precision element to store the result.
* \param s A pointer to a ipfe_FH structure.
* \param ciphertext A pointer to a ipfe_FH_ciphertext structure.
* \param fe_key A pointer to a ipfe_FH_key structure.
* \param bound The bound for the result.
* \param timesDec An array to store the timings of this protocol.
*/
int ipfe_FH_decrypt(mpz_t *r, ipfe_FH *s, ipfe_FH_ciphertext *c, ipfe_FH_fe_key *fe_key, mpz_t bound, double timesDec[]);